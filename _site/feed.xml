<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>DevonPeel.me</title>
		<description> Personal  Website  for  Devon  Peel. Christ follower, Techie, Kansas State and KC Royals Fan</description>
		<link>http://devonpeel.me</link>
		<atom:link href="http://devonpeel.me/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Using Additional Ansible Facts</title>
				<description>&lt;p&gt;This article is an addition to Additional Ansible Windows Facts.&lt;/p&gt;

&lt;p&gt;To view the facts after running the role enter in the following in a terminal.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
ansible &amp;lt;HOST or GROUP&amp;gt;  -m debug -a &quot;var=ansible_getFacts&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To check if a program is installed
1. Set the register variable 
&lt;code class=&quot;highlighter-rouge&quot;&gt;
- name: get variables
  debug: var=hostvars[inventory_hostname][&#39;ansible_getFacts&#39;][&#39;&amp;lt;PROGRAM NAME&amp;gt;&#39;]
    register: &amp;lt;PROGRAM NAME&amp;gt;
&lt;/code&gt;
2. Next use the register with the ansible ‘when’ command. Below is an exaple that will run in cases of the program missing. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;
  when: hostvars[inventory_hostname][&#39;ansible_getFacts&#39;][&#39;&amp;lt;PROGRAM NAME&amp;gt;&#39;] is undefined
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Complete Example 
```
- name: get variables
  debug: var=hostvars[inventory_hostname][‘ansible_getFacts’][‘Microsoft Office Professional Plus 2016’]
  register: msoffice_check&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;name: create  ms office dir 
win_file:
  path: C:\msoffice
  state: directory 
when: hostvars[inventory_hostname][‘ansible_getFacts’][‘Microsoft Office Professional Plus 2016’] is undefined&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;name: copy ms office dir to c drive
win_copy:
  src:  /misc/software/msoffice2016/
  dest: C:\msoffice
ignore_errors: yes
when: hostvars[inventory_hostname][‘ansible_getFacts’][‘Microsoft Office Professional Plus 2016’] is undefined&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;name:  Install msoffice
win_command: choco install msoffice.20.16.1.nupkg -y
args: 
  chdir: C:\msoffice
ignore_errors: yes
when: hostvars[inventory_hostname][‘ansible_getFacts’][‘Microsoft Office Professional Plus 2016’] is undefined&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;name: remove MS office dir
win_file:
  path: C:\msoffice
  state: absent
when: hostvars[inventory_hostname][‘ansible_getFacts’][‘Microsoft Office Professional Plus 2016’] is defined
```&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Thu, 21 Dec 2017 18:09:06 -0600</pubDate>
				<link>http://devonpeel.me/2017/12/using-additional-ansible-facts</link>
				<guid isPermaLink="true">http://devonpeel.me/2017/12/using-additional-ansible-facts</guid>
			</item>
		
			<item>
				<title>Additional Ansible Windows Facts</title>
				<description>&lt;p&gt;Ansible is a great tool to manage any Linux or Windows host. However it is missing some key tools and features. Here is a playbook and instructions to gather all installed programs on a Windows host.&lt;/p&gt;

&lt;p&gt;Start with creating a new role, I named mine facts.&lt;/p&gt;

&lt;p&gt;Create the &lt;code class=&quot;highlighter-rouge&quot;&gt;facts\tasks\main.yml&lt;/code&gt; file and add the following&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;```&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;name: create Scripts dir on remote host
win_file:
  path: C:\Scripts
  state: directory&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;name: copy custom facts file
win_copy:
  src: getFacts.ps1
  dest: C:\Scripts\&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;name: gather extra facts
setup:
  fact_path: C:\Scripts&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;name: Set intermediate fact
set_fact:
  vars_hack: “”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;name: set program facts
set_fact:
  one_fact: ansible_getFacts
  var_hack:  “”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;dont-delete-the-entire-dir-delete-the-file-to-update-it&quot;&gt;dont delete the entire dir, delete the file to update it.&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;name: delete json file
file:
  path: “/.json”
  state: absent
failed_when: false
delegate_to: localhost&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;name: Dump all vars for dedugging
action: template src=templates/dumpall.j2 dest=”/.json”
delegate_to: localhost&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;name: run app.py to clean sensitive data from the json file
script: app.py
delegate_to: localhost
ignore_errors: true
```&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now create the &lt;code class=&quot;highlighter-rouge&quot;&gt;facts/files/getFacts.ps1&lt;/code&gt; file and add the follwoing below. This file will be copied to each Windows host and run return a dictionary of all installed programs.
&lt;code class=&quot;highlighter-rouge&quot;&gt;
#sourced from https://hindenes.com/trondsworking/2016/11/05/using-ansible-as-a-software-inventory-db-for-your-windows-nodes/
$packages = Get-WmiObject -Class Win32_Product
$returnpackages = @{}
foreach ($package in $packages)
{
   $subpackagedictionary = @{&quot;Name&quot; = $Package.Name; &quot;Version&quot; = $Package.Version; &quot;Caption&quot; = $Package.Caption;}
   $returnpackages.Add($Package.Name, $subpackagedictionary)
}
#Write-Host $returnpackages.&quot;Google Chrome&quot;.Name
#Write-Host $returnpackages.&quot;Google Chrome&quot;.Version
$returnpackages
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For debugging purposes you may want to create JSON files from the returned dictionary. To do so create a &lt;code class=&quot;highlighter-rouge&quot;&gt;facts/templates/dumpall.j2&lt;/code&gt; and add the following.
```&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;{{ vars_hack&lt;/td&gt;
      &lt;td&gt;to_json }}&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Create the &lt;code class=&quot;highlighter-rouge&quot;&gt;facts\files\app.py&lt;/code&gt; and add the following below. This files erases passwords dumped in the the json files.
```
#!/usr/bin/env python
# orginal found at https://hindenes.com/trondsworking/2016/11/05/using-ansible-as-a-software-inventory-db-for-your-windows-nodes/&lt;/p&gt;

&lt;p&gt;import os
import rethinkdb
import json
import rethinkdb as r&lt;/p&gt;

&lt;p&gt;from os import listdir
from os.path import isfile, join&lt;/p&gt;

&lt;p&gt;import sys
reload(sys)
sys.setdefaultencoding(‘utf-8’)&lt;/p&gt;

&lt;p&gt;tempfolder = ‘../roles/facts/files/data/json/’&lt;/p&gt;

&lt;p&gt;if not os.path.isdir(tempfolder):
  os.makedirs(tempfolder)&lt;/p&gt;

&lt;p&gt;onlyfiles = [f for f in listdir(tempfolder) if isfile(join(tempfolder, f))]&lt;/p&gt;

&lt;p&gt;for file in onlyfiles:
  host_name = str(file).replace(‘.json’,’’)  ##I am using host ips, to use hostnames use str(file).split(“.”)[3]
  with open(os.path.join(tempfolder, file),’r+’) as data_file:
      data = json.load(data_file)
      data[‘ansible_password’] = ‘’
      data[‘ansible_password_ad’] = ‘’
      data_file.close()
  with open(tempfolder+’/’+file, ‘w+’) as outfile:
    json.dump(data, outfile, sort_keys=True, indent=2, separators=(‘,’, ‘: ‘))
  outfile.close()
```&lt;/p&gt;

&lt;p&gt;Create one last file the vars file for the role. Create &lt;code class=&quot;highlighter-rouge&quot;&gt;vars/main.yml&lt;/code&gt; and add the following.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
json_files: &#39;../roles/facts/files/data/json/&#39;
host_program_csv: &#39;../roles/facts/files/data/programs&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now install the redis service.
For Centos 7
&lt;code class=&quot;highlighter-rouge&quot;&gt;
yum install redis
systemctl enable redis
systemctl start redis
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Generate a hash for redis
&lt;code class=&quot;highlighter-rouge&quot;&gt;
echo &quot;redis-password-string&quot; | sha256sum 
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Edit the redis config file in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/redis.conf&lt;/code&gt;and find the line &lt;em&gt;requirepass&lt;/em&gt; and insert the generated hash&lt;/p&gt;

&lt;p&gt;Edit your base ansible.cfg usualy in the first directory of your ansible setup and add the line&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
fact_caching_connection = &amp;lt;redis-ip&amp;gt;:6379:0:&amp;lt;redis-hash&amp;gt;
&lt;/code&gt;&lt;/p&gt;
</description>
				<pubDate>Tue, 14 Nov 2017 12:37:06 -0600</pubDate>
				<link>http://devonpeel.me/2017/11/addition-ansible-windows-facts</link>
				<guid isPermaLink="true">http://devonpeel.me/2017/11/addition-ansible-windows-facts</guid>
			</item>
		
			<item>
				<title>SMTP to SMS relay</title>
				<description>&lt;p&gt;This script will send SMS via various smtp relays.&lt;/p&gt;

&lt;p&gt;```
import smtplib&lt;/p&gt;

&lt;h1 id=&quot;use-sms-gateway-provided-by-mobile-carrier&quot;&gt;Use sms gateway provided by mobile carrier:&lt;/h1&gt;
&lt;p&gt;# alltel         number@message.Alltel.com 
# at&amp;amp;t:          number@mms.att.net
# boost:         number@myboostmobile.com
# google voice   number@@txt.voice.google.com (needs work)
# metro pcs:     number@mymetropcs.com
# sprint:        number@page.nextel.com
# straight talk  number@mypixmessages.com
# t-mobile:      number@tmomail.net
# us cellular:   number@mms.uscc.net&lt;br /&gt;
# verizon:-       number@vtext.com
# virgin:        number@vmpix.com&lt;/p&gt;

&lt;p&gt;server = smtplib.SMTP( “smtp.gmail.com”, 587 )
server.ehlo()
server.starttls()
server.ehlo()
server.login( ‘Google username’, ‘&lt;google app=&quot;&quot; password=&quot;&quot;&gt;&#39; )&lt;/google&gt;&lt;/p&gt;

&lt;h1 id=&quot;serversendmail-from-numbertmomailnet-hello-&quot;&gt;server.sendmail( ‘&lt;from&gt;&#39;, &#39;&lt;number&gt;@tmomail.net&#39;, &#39;Hello!&#39; )&lt;/number&gt;&lt;/from&gt;&lt;/h1&gt;

&lt;p&gt;server.sendmail( ‘&lt;sending phone=&quot;&quot; number=&quot;&quot;&gt;&#39;, &#39;&lt;receiving phone=&quot;&quot; numver=&quot;&quot;&gt;@&lt;domain.com&gt;&#39;, &#39;Leory Jenkins!!!!&#39; )
```&lt;/domain.com&gt;&lt;/receiving&gt;&lt;/sending&gt;&lt;/p&gt;

</description>
				<pubDate>Sat, 25 Feb 2017 12:12:06 -0600</pubDate>
				<link>http://devonpeel.me/2017/02/SMTPtoSMSrelay</link>
				<guid isPermaLink="true">http://devonpeel.me/2017/02/SMTPtoSMSrelay</guid>
			</item>
		
			<item>
				<title>Python WSGI</title>
				<description>&lt;p&gt;How to run a python pyramid application under apache2(httpd) using the mod_wgsi.&lt;/p&gt;

&lt;p&gt;Create application user&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  useradd appdeploy
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Edit /etc/passwd&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  appdeploy:x:&amp;lt;uid&amp;gt;:&amp;lt;gid&amp;gt;:appdeploy:/&amp;lt;home&amp;gt;/&amp;lt;directory&amp;gt;:/sbin/nologin
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create an apache2 config file under /etc/httpd/conf.d/&lt;/p&gt;

&lt;p&gt;```
&amp;lt;virtuallHost *:80&amp;gt;
  ServerName archive.math.ksu.edu&lt;/p&gt;

&lt;h1 id=&quot;use-only-1-python-sub-interpreter--multiple-sub-interpreters&quot;&gt;Use only 1 Python sub-interpreter.  Multiple sub-interpreters&lt;/h1&gt;
&lt;p&gt;# play badly with C extensions.  See
# http://stackoverflow.com/a/10558360/209039
WSGIApplicationGroup %{GLOBAL}
WSGIPassAuthorization On
WSGIDaemonProcess pyramid user=appdeploy    group=appdeploy  threads=4 \
   python-path=/var/www/archive/temp_py/lib/python2.7/site-packages
WSGIScriptAlias / /var/www/archive/pyramid.wsgi&lt;/p&gt;

&lt;p&gt;&amp;lt;Directory /var/www/archive&amp;gt;
  WSGIProcessGroup pyramid
  Order allow,deny
  Allow from all
&amp;lt;/Directory&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/VirtualHost&amp;gt;
```&lt;/p&gt;

&lt;p&gt;Create a WSGI file in the application directory that will be called by the apache2 service.&lt;/p&gt;

&lt;p&gt;```
import os,sys,site&lt;/p&gt;

&lt;p&gt;os.environ[‘PYTHON_EGG_CACHE’] = ‘/var/www/archive/temp_py’&lt;/p&gt;

&lt;p&gt;from pyramid.paster import get_app, setup_logging
ini_path = ‘/var/www/archive/production.ini’
#setup_logging(ini_path)
application = get_app(ini_path, ‘main’)
```&lt;/p&gt;

</description>
				<pubDate>Tue, 17 Jan 2017 10:09:06 -0600</pubDate>
				<link>http://devonpeel.me/2017/01/Python-WSGI</link>
				<guid isPermaLink="true">http://devonpeel.me/2017/01/Python-WSGI</guid>
			</item>
		
			<item>
				<title>Google Analytics</title>
				<description>&lt;p&gt;I am not sure  of the Russian interest in this website.&lt;/p&gt;

&lt;p&gt;These are some funny languages 
&lt;img src=&quot;http://devonpeel.me/assets/Google_Analytics_language.png&quot; alt=&quot;useful image&quot; /&gt;
&lt;img src=&quot;http://devonpeel.me/assets/Google_Analytics_Country.png&quot; alt=&quot;useful image&quot; /&gt;
&lt;img src=&quot;http://devonpeel.me/assets/Google_Analytics_city.png&quot; alt=&quot;useful image&quot; /&gt;
&lt;img src=&quot;http://devonpeel.me/assets/Google_Analytics_time.png&quot; alt=&quot;useful image&quot; /&gt;
&lt;img src=&quot;http://devonpeel.me/assets/Google_Analytics_chart.png&quot; alt=&quot;useful image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://devonpeel.me/images/Google_Analytics_language.png&quot; alt=&quot;screenshotOne&quot; class=&quot;img-responsive&quot; /&gt;
&lt;img src=&quot;http://devonpeel.me/images/Google_Analytics_Country.png&quot; alt=&quot;screenshotTwo&quot; class=&quot;img-responsive&quot; /&gt; 
&lt;img src=&quot;http://devonpeel.me/images/Google_Analytics_city.png&quot; alt=&quot;screenshotThree&quot; class=&quot;img-responsive&quot; /&gt;
&lt;img src=&quot;http://devonpeel.me/images/Google_Analytics_time.png&quot; alt=&quot;screenshotFour&quot; class=&quot;img-responsive&quot; /&gt;
&lt;img src=&quot;http://devonpeel.me/images/Google_Analytics_chart.png&quot; alt=&quot;screenshotFive&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

</description>
				<pubDate>Mon, 12 Dec 2016 10:09:06 -0600</pubDate>
				<link>http://devonpeel.me/2016/12/Google-Analytics</link>
				<guid isPermaLink="true">http://devonpeel.me/2016/12/Google-Analytics</guid>
			</item>
		
			<item>
				<title>Chore App</title>
				<description>&lt;h2 id=&quot;chore-app&quot;&gt;Chore App&lt;/h2&gt;
&lt;p&gt;I made this chore asigning application for a small college dorm. Its purpose is to randomly assign chores to residents with respect to gender. A male (m) will get a male chore or gender neutral chore (n) and female (f) will get a female chore or gender neutral chore. Note random is not fair. Good Luck&lt;/p&gt;

&lt;p&gt;The files needed&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;list of residents&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
   gender firstname lastname
   m john smith
   f julie smith
   m tom appleseed
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;list of chores&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  gender chore
  f clean womens bathroom
  n mop hallway
  m clean mens showers
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ChoreApp.py&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;clean.icns - an icon file&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;build-the-app&quot;&gt;Build the App&lt;/h2&gt;

&lt;h2 id=&quot;setup-python-virtaul-environment&quot;&gt;Setup Python Virtaul Environment&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
pip install virtualenv
virtualenv venv
source venv/bin/activate
pip install xlwt py2app
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;chore-app-code&quot;&gt;Chore App Code&lt;/h2&gt;
&lt;p&gt;Please place chore app code in a seperate directory differnet to the python virtual environment.&lt;/p&gt;

&lt;p&gt;```
import os, sys,random, xlwt, time, datetime
from xlwt import *&lt;/p&gt;

&lt;h1 id=&quot;file-imports&quot;&gt;file imports&lt;/h1&gt;
&lt;p&gt;chore_file=open(“../../../chores.txt”, “r”)
chores = chore_file.readlines()
#print chores&lt;/p&gt;

&lt;p&gt;resident_file=open(“../../../residents.txt”, “r”)
residents = resident_file.readlines()
#print residents&lt;/p&gt;

&lt;h1 id=&quot;create-a-psueode-final-enum&quot;&gt;create a psueode final enum&lt;/h1&gt;
&lt;p&gt;# m equals male
# f equals female
# n equals neutral&lt;/p&gt;

&lt;h1 id=&quot;creates-excel-file&quot;&gt;creates excel file&lt;/h1&gt;
&lt;p&gt;book = xlwt.Workbook(encoding=”utf-8”)
sheet1 = book.add_sheet(“Sheet 1”)&lt;/p&gt;

&lt;p&gt;font0 = Font()
font0.bold = True&lt;/p&gt;

&lt;p&gt;style0 = XFStyle()
style0.font = font0&lt;/p&gt;

&lt;h1 id=&quot;error-check&quot;&gt;error check&lt;/h1&gt;
&lt;p&gt;if len(chores) != len(residents):
    print “Error:”
    if len(chores) &amp;gt; len(residents):
            sys.exit(“ Too many chores”)
    else:
            sys.exit(“ Too many residents”)&lt;/p&gt;

&lt;p&gt;assignment = []
i = 0
while(residents):
    rand = random.randrange(0, len(residents))&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# retrieves the f or m before residents name
resident = residents[rand]
resident_gender = resident[0:1]
chore_gender = chores[i][0:1]

if(resident_gender == chore_gender) or (chore_gender == &#39;n&#39;):
    len_chore = len(chores[i])
    len_resident = len(resident)
    print resident[2:len_resident] + &quot; &quot;  + chores[i][2:len_chore]
    tupl = [resident[2:len_resident].replace(&#39;\n&#39;,&#39;&#39;), chores[i][2:len_chore].replace(&#39;\n&#39;,&#39;&#39;)]
    assignment.append(tupl)
    residents.pop(rand)
    i=i+1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;alphabetically-sort&quot;&gt;alphabetically sort&lt;/h1&gt;
&lt;p&gt;assignment.sort()
#write out alphabetically sorted chore list
j=1
date = datetime.datetime.now()
enddate = datetime.datetime.now() + datetime.timedelta(days=6)
sheet1.write(0,0,”Chore List For Week Of “ + date.strftime(‘%m/%d’) +” - “+ enddate.strftime(‘%m/%d’), style0)
for i in assignment:
    sheet1.write(j,0,i[0])
    sheet1.write(j,1,i[1])
    sheet1.write(j+1,0,’’)
    j=j+2&lt;/p&gt;

&lt;h1 id=&quot;saves-excell-file&quot;&gt;saves excell file&lt;/h1&gt;
&lt;p&gt;book.save(“../../../chores”+ date.strftime(‘%Y_%m_%d’) + “.xls”)
#book.save(“chores”+ date.strftime(‘%Y_%m_%d’) + “.xls”)&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&quot;the-build&quot;&gt;The Build&lt;/h2&gt;
&lt;p&gt;Change the the working direcotry to the chore_app and create a file called setup.py&lt;/p&gt;

&lt;p&gt;```
cd chore_app
vim setup.py
   “””
   This is a setup.py script generated by py2applet&lt;/p&gt;

&lt;p&gt;Usage:
   python setup.py py2app
   “””
   from setuptools import setup&lt;/p&gt;

&lt;p&gt;APP = [‘ChoreApp.py’]
   DATA_FILES = [‘chores.txt’,’residents.txt’]
   OPTIONS = {
    ‘argv_emulation’: True,
    ‘iconfile’: ‘clean.icns’,
    ‘plist’: {
        ‘CFBundleName’: “ChoreApp”,
        ‘CFBundleDisplayName’: “ChoreApp”,
        ‘CFBundleGetInfoString’: “App for assigning chore”,
        ‘CFBundleVersion’: “0.2.0”,
        ‘CFBundleShortVersionString’: “0.2.0”,
        ‘NSHumanReadableCopyright’: u”Copyleft Devon Peel”
    }
}&lt;/p&gt;

&lt;p&gt;setup(
    app=APP,
    data_files=DATA_FILES,
    options={‘py2app’: OPTIONS},
    setup_requires=[‘py2app’],
)&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Time to build the App&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
python setup.py py2app
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;run-choreapp&quot;&gt;Run ChoreApp&lt;/h2&gt;
&lt;p&gt;Place the ChoreApp file created in the above command with the chores.txt file and residents.txt file in the same directory. Then click on the ChoreApp to generate the output file assigning chores to residents.&lt;/p&gt;
</description>
				<pubDate>Thu, 12 May 2016 02:00:00 -0500</pubDate>
				<link>http://devonpeel.me/2016/05/ChoreApp</link>
				<guid isPermaLink="true">http://devonpeel.me/2016/05/ChoreApp</guid>
			</item>
		
			<item>
				<title>Chocolatey "The Windows" Package Manager</title>
				<description>&lt;p&gt;Install Chocolatey via PowerShell&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
iex ((new-object net.webclient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;)) 
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Install via Command Prompt&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
@powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;iex ((new-object net.webclient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&quot; &amp;amp;&amp;amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a repo&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
 choco new &amp;lt;project name&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Edit the &lt;project name=&quot;&quot;&gt;.nuspect file, install, and uninstall files under the tools directory&lt;/project&gt;&lt;/p&gt;
</description>
				<pubDate>Wed, 11 May 2016 12:10:06 -0500</pubDate>
				<link>http://devonpeel.me/2016/05/chocolatey</link>
				<guid isPermaLink="true">http://devonpeel.me/2016/05/chocolatey</guid>
			</item>
		
			<item>
				<title>Irssi Setup</title>
				<description>&lt;h2 id=&quot;in-the-irssi-config-add-the-following&quot;&gt;In the irssi config add the following:&lt;/h2&gt;

&lt;h2 id=&quot;setting-up-crapbuserpl&quot;&gt;Setting up crapbuser.pl&lt;/h2&gt;
&lt;p&gt;In the aliases section add&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
cb = &quot;/crapbuster&quot;;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the setting section add&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  &quot;perl/core/scripts&quot; = {
              crapbuster_levels = &quot;JOINS PARTS QUITS  CLIENTCRAP CRAP MODE  KICKSi&quot;;
   };
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-up-logging&quot;&gt;Setting Up logging&lt;/h2&gt;
&lt;p&gt;In the setting section add the following&lt;/p&gt;

&lt;p&gt;```
settings = {
  core = {    log_timestamp = “%H:%M:%S “;
    recode_autodetect_utf8 = “yes”;
    recode_fallback = “ISO-8859-15”;
    recode_out_default_charset = “ISO-8859-15”;
    recode_transliterate = “yes”;
    recode = “yes”;
  };
  “fe-text” = { actlist_sort = “refnum”; };
  “fe-common/core” = {
    autolog = “yes”;
    autolog_path = “~/.irssi/logs/%Y/$0/%m-%d.log”;
    term_charset = “utf-8”;
    activity_hide_level = “= JOINS QUITS”;
  };&lt;/p&gt;

&lt;p&gt;};
```&lt;/p&gt;

&lt;h2 id=&quot;downloading-the-scripts&quot;&gt;Downloading the Scripts&lt;/h2&gt;
&lt;p&gt;In .irssi/scripts add the following perlscripts from https://scripts.irssi.org/&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;awayproxy.pl&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;crapbuster.pl&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;screen_away.pl (may want to eidt this script)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;startup&quot;&gt;Startup&lt;/h2&gt;

&lt;p&gt;Create a startup script in .irssi/startup&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
/set term_charset utf-8
/set recode_autodetect_utf8 ON
/set recode_fallback ISO-8859-15
/set recode_out_default_charset ISO-8859-15
/set recode_transliterate ON
/set recode ON
/load crapbuster.pl
/set crapbuster_levels JOINS PARTS QUITS  CLIENTCRAP CRAP MODE  KICKSi
/alias cb /crapbuster
/load awayproxy.pl
/load screen_away.pl
&lt;/code&gt;&lt;/p&gt;
</description>
				<pubDate>Tue, 10 May 2016 12:10:06 -0500</pubDate>
				<link>http://devonpeel.me/2016/05/irssi</link>
				<guid isPermaLink="true">http://devonpeel.me/2016/05/irssi</guid>
			</item>
		
			<item>
				<title>Oni 3D Printer</title>
				<description>
</description>
				<pubDate>Tue, 10 May 2016 11:09:06 -0500</pubDate>
				<link>http://devonpeel.me/2016/05/template</link>
				<guid isPermaLink="true">http://devonpeel.me/2016/05/template</guid>
			</item>
		
			<item>
				<title>Oni 3D Printer</title>
				<description>
</description>
				<pubDate>Tue, 10 May 2016 11:09:06 -0500</pubDate>
				<link>http://devonpeel.me/2016/05/Oni</link>
				<guid isPermaLink="true">http://devonpeel.me/2016/05/Oni</guid>
			</item>
		
	</channel>
</rss>
