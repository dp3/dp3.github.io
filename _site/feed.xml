<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>DevonPeel.me</title>
		<description> Personal  Website  for  Devon  Peel. Kansas State and KC Royals Fan</description>
		<link>https://devonpeel.me</link>
		<atom:link href="https://devonpeel.me/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Garage Door Sensor</title>
				<description>&lt;p&gt;This is an adaptation of &lt;a href=&quot;https://youtu.be/dFDGtlSi9Eg&quot;&gt;Jeff Geerling’s garage door sensor project&lt;/a&gt;. My adaptation adds two temperature sensors and a display.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://devonpeel.me/images/GarageDoorSensor1.png&quot; alt=&quot;screenshotOne&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
esphome:
  name: garage-door-temp-display-pico

rp2040:
  board: rpipicow
  framework:
    # Required until https://github.com/platformio/platform-raspberrypi/pull/36 is merged
    platform_version: https://github.com/maxgerhardt/platform-raspberrypi.git

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

api:
  encryption:
   key: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;

logger:
  level: DEBUG

output:
  # Built-in LED
  - platform: gpio
    pin:
      number: 32  # 25 for Pico (non-W)
      mode: output
    id: LED

binary_sensor:
  # East Garage Door
  - platform: gpio
    pin:
      number: 14
      mode:
        input: true
        pullup: true
        output: false
        open_drain: false
        pulldown: false
      inverted: false
    name: East Garage Door
    id: east_garage_door
    device_class: garage_door
    filters:
      - delayed_on: 10ms
    disabled_by_default: false
    publish_initial_state: true
    on_state:
      then:
        - if:
            condition:
              or:
                - binary_sensor.is_on: east_garage_door
                - binary_sensor.is_on: west_garage_door
            then:
              - output.turn_on: LED
            else:
              - output.turn_off: LED

  # West Garage Door
  - platform: gpio
    pin:
      number: 15
      mode:
        input: true
        pullup: true
        output: false
        open_drain: false
        pulldown: false
      inverted: false
    name: West Garage Door
    id: west_garage_door
    device_class: garage_door
    filters:
      - delayed_on: 10ms
    disabled_by_default: false
    publish_initial_state: true
    on_state:
      then:
        - if:
            condition:
              or:
                - binary_sensor.is_on: east_garage_door
                - binary_sensor.is_on: west_garage_door
            then:
              - output.turn_on: LED
            else:
              - output.turn_off: LED


# temperature
# Example configuration entry
dallas:
  - id: garage_temp_bus
    pin: GPIO18
  - id: outside_temp_bus
    pin: GPIO26 

# Individual sensors
sensor:
  - platform: dallas
    address: 0x0000000000000000
    name: &quot;Garage Temperature&quot;
    dallas_id: garage_temp_bus
    id: garage_temp
  - platform: dallas
    address: 0x1111111111111111
    name: &quot;Outside Temperature&quot;
    dallas_id: outside_temp_bus
    id: outside_temp

font:
  - file: &quot;fonts/Roboto-Black.ttf&quot;
    id: roboto
    size: 15
i2c:
  sda: GPIO20
  scl: GPIO21

display:
  - platform: ssd1306_i2c
    model: &quot;SH1106 128x64&quot;
    rotation: 180 
      #    reset_pin: 0
    address: 0x3C
    lambda: |-
      if (id(garage_temp).has_state()) {
        it.printf(0, 0, id(roboto),&quot;Garage: %.1f°F&quot;, id(garage_temp).state*9/5+32);
      }
      if (id(outside_temp).has_state()) {
        it.printf(0, 16, id(roboto),&quot;Outside: %.1f°F&quot;, id(outside_temp).state*9/5+32);
      }
      it.printf(0, 31, id(roboto), &quot;East Door: %s&quot;, id(east_garage_door).state);
      it.printf(0, 46, id(roboto), &quot;West Door: %s&quot;, id(west_garage_door).state);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Install Esphome&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Install the following python packages&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install wheel
pip3 install esphome
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Flash Procedure&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir pico-pi

# Create the yaml file name and insert the code 
vim garage-door-temperature-display.yml


# Compile the code
esphome run garage-door-temperature-display.yml --device /Volumes/RPI-RP2

cd ~/pico-pi/.esphome/build/garage-door-temperature-display.yml/.pioenvs/rpi-pico/

# Plugin the pico while press the flash button
# Run &apos;mount | grep RP&apos; command to find the mount point

# flash the code on to the pico 
cp firmware.uf2 /media/&amp;lt;user&amp;gt;/RPI-RP2 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://devonpeel.me/images/GarageDoorSensor2.png&quot; alt=&quot;screenshotTwo&quot; class=&quot;img-responsive&quot; /&gt;
&lt;img src=&quot;https://devonpeel.me/images/GarageDoorSensor3.png&quot; alt=&quot;screenshotThree&quot; class=&quot;img-responsive&quot; /&gt;`&lt;/p&gt;

</description>
				<pubDate>Sat, 10 Jun 2023 11:09:06 -0500</pubDate>
				<link>https://devonpeel.me/2023/06/garage_door_sensor</link>
				<guid isPermaLink="true">https://devonpeel.me/2023/06/garage_door_sensor</guid>
			</item>
		
			<item>
				<title>Wifi Talley Lights</title>
				<description>&lt;p&gt;This is a guide on how to flash the wifi talley for the https://wifi-tally.github.io/ project on Linux.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flash and Configure the NodeMCU with Linux&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Create Project Directory 
mkdir ~/wifiTalley

# Install the tools
git clone https://github.com/AndiDittrich/NodeMCU-Tool.git
sudo npm install nodemcu-tool -g
sudo npm install cli-progress  
pip install esptool

mkdir ~/wifiTalley/fireware
cd ~/wifiTalley/firmware/

# Download the binary file and config files 
wget https://github.com/wifi-tally/wifi-tally/releases/download/0.5.1/vtally-0.5.1-esp8266.zip
unzip vtally-0.5.1-esp8266.zip

# Flash the the Firmware 
esptool.py --port /dev/ttyUSB0 write_flash -fm dio 0x00000 ~/wifiTally/firmware/nodemcu-3.0-master_20200610-cfe68233-float.bin 

cd ~/wifiTally/NodeMCU-Tool

# Upload the config files
bin/nodemcu-tool.js upload ~/wifiTally/firmware/init.lua
bin/nodemcu-tool.js upload ~/wifiTally/firmware/*.lci

# edit the talley-settings.ini, set the ssid, ssid password, hub ip, and talley name 
vim ~/wifiTally/firmware/tally-settings.ini
 
# Upload the last config files 
bin/nodemcu-tool.js upload ~/wifiTally/firmware/tally-settings.ini

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Resources&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://wifi-tally.github.io/&lt;/li&gt;
  &lt;li&gt;https://nodemcu.readthedocs.io/en/release/getting-started/#esptoolpy&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Thu, 01 Jun 2023 11:09:06 -0500</pubDate>
				<link>https://devonpeel.me/2023/06/Wifi-tally_lights</link>
				<guid isPermaLink="true">https://devonpeel.me/2023/06/Wifi-tally_lights</guid>
			</item>
		
			<item>
				<title>Systemd Start Script for Superset</title>
				<description>&lt;p&gt;Create the file superset.service at /lib/systemd/system/superset.service and insert the following. Note the user is sysadmin, the port is 8088 and superset is installed in the /opt/super python virtual environment&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
Description=Start Superset

[Service]
Type=simple
User=sysadmin
Group=sysadmin
Environment=&quot;FLASK_APP=superset&quot;
ExecStart=/opt/super/bin/superset run -p 8088 --with-threads --reload --debugger --host 0.0.0.0

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To start the service&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl start superset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Mon, 07 Nov 2022 10:09:06 -0600</pubDate>
				<link>https://devonpeel.me/2022/11/superset_systemd</link>
				<guid isPermaLink="true">https://devonpeel.me/2022/11/superset_systemd</guid>
			</item>
		
			<item>
				<title>Installing Apache SuperSet</title>
				<description>&lt;p&gt;Update, Upgrade and install Dependancies&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get update
apt-get -y upgrade
apt-get -y install build-essential libssl-dev libffi-dev python3-dev python3-pip libsasl2-dev libldap2-dev default-libmysqlclient-dev libpq-dev python-is-python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Install Superset set with pip on Ubuntu 20.04 while version locking a few packages&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install --upgrade pip
pip install --upgrade pip --no-warn-script-location
pip install werkzeug==2.0.3 --no-warn-script-location
pip install flask==2.1.3 --no-warn-script-location
pip install wtforms==2.3.0 --no-warn-script-location
pip install --upgrade pyopenssl --no-warn-script-location
pip install psycopg2-binary pillow gunicorn gevent --no-warn-script-location

pip install apache-superset --no-warn-script-location
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Configuring Superset and create a Superset user&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo echo -e &apos;export FLASK_APP=superset&apos; &amp;gt;&amp;gt; /etc/profile.d/superset.sh
  
export FLASK_APP=superset
FLASK_APP=superset /home/ubuntu/.local/bin/superset db upgrade

FLASK_APP=superset /home/ubuntu/.local/bin/superset fab create-admin --username admin --firstname Fname --lastname Sirname --email admin@domain.com --password &amp;lt;PASSWORD&amp;gt;

FLASK_APP=superset /home/ubuntu/.local/bin/superset init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Starting the application&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#enable the python virtual environment
source super/bin/active	 
export FLASK_APP=superset
superset init
superset run -p 8088 --with-threads --reload --debugger --host 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Configuring Apache2 as Proxy with SSL&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install apache2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create the following sites in /etc/apache2/sites-available. Please change the 10.0.0.8 to the proper ip or domain.&lt;/p&gt;

&lt;p&gt;/etc/apache2/sites-available/wesite.conf&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
    #ServerName server.domain.com
    #ServerAlias server.doamin.com

    #Redirect permanent / http://10.0.0.8:8088
    Redirect permanent / https://10.0.0.8

&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;/etc/apache2/sites-available/wesite-sll.conf&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;VirtualHost *:443&amp;gt;
    #ServerAdmin root@domain.com
    ServerName 10.0.0.8

    #DocumentRoot /var/www
    #ServerAlias fqdn.domain.com

    SSLEngine on
    SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt
    SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key
 
    ProxyPass / http://10.0.0.8:8088/
    ProxyPassReverse / http://10.0.0.8:8088/
    ProxyRequests off
    ProxyPreserveHost On
    SSLProxyEngine On
    &amp;lt;Proxy *&amp;gt;
        Order deny,allow
        Allow from all
    &amp;lt;/Proxy&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create an SSL Certificate&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enable the Apache sites, enable SSL and start the Apache2 service&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo a2ensite website.conf
sudo a2ensite website-ssl.conf
sudo a2enmod ssl
sudo systemctl restart apache2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Sat, 01 Oct 2022 11:09:06 -0500</pubDate>
				<link>https://devonpeel.me/2022/10/superset</link>
				<guid isPermaLink="true">https://devonpeel.me/2022/10/superset</guid>
			</item>
		
			<item>
				<title>Ansible Windows win_copy is slow</title>
				<description>&lt;p&gt;I have found a few problems with using the Ansible module win_copy. The module is slow and unreliable thus causing multiple timeouts. I have found a more reliable and quicker solution by using using win_command with robocopy.&lt;/p&gt;

&lt;p&gt;Here is an example on how I used win_copy in the past.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- name: copy ms office dir to c drive
  win_copy:
    src:  /misc/filessoftware/chocolatey/msoffice2016/
    dest: C:\msoffice
  ignore_errors: yes
  when: hostvars[inventory_hostname][&apos;ansible_getFacts&apos;][&apos;Microsoft Office Professional Plus 2016&apos;] is undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The new solution along with mounting a network share.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- name: Transfer of msoffice2016
  win_command: &apos;&apos;
  with_items:
    -  &apos;net use  s: \\nfs.fqdn.com\software /P:yes /user:  &apos;
    -  &apos;robocopy s:\msoffice2016 \msoffice2016 /E&apos;
  ignore_errors: yes
  no_log: True 
  when: hostvars[inventory_hostname][&apos;ansible_getFacts&apos;][&apos;Microsoft Office Professional Plus 2016&apos;] is undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Sat, 10 Aug 2019 11:09:06 -0500</pubDate>
				<link>https://devonpeel.me/2019/08/win-ansible-win-copy</link>
				<guid isPermaLink="true">https://devonpeel.me/2019/08/win-ansible-win-copy</guid>
			</item>
		
			<item>
				<title>Icinga2 SNMP Temperature Check</title>
				<description>&lt;p&gt;After Icinga2 is all setup.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install nagios via yum or apt get
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  apt-get install nagios-plugins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;or&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  yum install nagios-plugins-snmp.x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/icinga2/conf.d/services.conf&lt;/code&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apply Service &quot;Check temperature &quot; for (config in host.vars.temperature) {
 import &quot;generic-temperature-check&quot;      
 check_command = &quot;check_temp&quot;
 vars.hostname = config
 assign where host.vars.temperature
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add the following to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/icinga2/conf.d/commands.conf&lt;/code&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;object CheckCommand &quot;check_temp&quot; {
 import &quot;plugin-check-command&quot;
 command = [PluginDir + &quot;/check_snmp&quot;]
 arguments = {
 &quot;-H&quot; = &quot;$hostname$&quot;
 &quot;-o&quot; = &quot;$temp_oid$&quot;
 &quot;-c&quot; = &quot;$temp_critical$&quot;
 &quot;-w&quot; = &quot;$temp_warning$&quot;
 &quot;-P&quot; = &quot;$temp_version$&quot;
 &quot;-C&quot; = &quot;$temp_community$&quot;  
 }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/icinga2/conf.d/hosts.conf&lt;/code&gt; file to include the new host to monitor.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;object Host &quot;environment.fqdn.com&quot; {
 import &quot;generic-temperature-check&quot;
 address=&quot;10.0.2.2&quot;
 vars.hostname=&quot;environment.fqdn.com&quot;
 vars.temperature = &quot;environment.fqdn.com&quot;
 vars.temp_critical= [&quot;90&quot;,&quot;90&quot;]
 vars.temp_warning= [&quot;80&quot;,&quot;80&quot;]
 /* APC temp oid codes, these may need to be changed  */
 vars.temp_oid = [&quot;1.3.6.1.4.1.318.1.1.10.3.13.1.1.3.1&quot;, &quot;1.3.6.1.4.1.318.1.1.10.3.13.1.1.3.2&quot;]
 vars.temp_version=&quot;1&quot;
 vars.temp_community=&quot;communityName&quot;
 vars.notification[&quot;mail&quot;] = {
 groups = [ &quot;icingaadmins&quot; ] 
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Mon, 29 Jul 2019 11:09:06 -0500</pubDate>
				<link>https://devonpeel.me/2019/07/icinga2-snmp-tempcheck</link>
				<guid isPermaLink="true">https://devonpeel.me/2019/07/icinga2-snmp-tempcheck</guid>
			</item>
		
			<item>
				<title>Icinga2 SSL Check</title>
				<description>&lt;p&gt;After Icinga2 is all setup.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install nagios via yum or apt get
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  apt-get install nagios-plugins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;or&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  yum install nagios-plugins-http.x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/icinga2/conf.d/services.conf&lt;/code&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  apply Service &quot;Check SSL certificate for &quot; for (config in host.vars.ssl_domains) {
 check_command = &quot;check_ssl&quot;
 vars.hostname = config
 vars.critical = &quot;15&quot;
 vars.warning = &quot;30&quot; 
 assign where host.vars.ssl_domains
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add the following to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/icinga2/conf.d/commands.conf&lt;/code&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  object CheckCommand &quot;check_ssl&quot; {
 import &quot;plugin-check-command&quot;
 command = [PluginDir + &quot;/check_http&quot;]
 arguments = {
   &quot;-H&quot; = &quot;$hostname$&quot;
   &quot;-C&quot; = &quot;$critical$&quot;
 }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/icinga2/conf.d/hosts.conf&lt;/code&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;object Host &quot;webhost.fqdn.com&quot; {
 import &quot;generic-host&quot;
 address = &quot;10.0.2.1&quot; 
 vars.disks[&quot;disk /&quot;] = { disk_partitions = &quot;/&quot; }
 vars.os = &quot;Linux&quot;
 vars.remote_client = &quot;webhost.fqdn.com&quot; 
 vars.users_wgreater = 10
 vars.users_cgreater = 20 
 vars.ssl_domains = [&quot;website.fqdn.com&quot;,&quot;websitetwo.fqdn.com&quot;] 
 vars.notification[&quot;mail&quot;] = {
 groups = [ &quot;icingaadmins&quot; ] 
 } 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Sun, 28 Jul 2019 11:09:06 -0500</pubDate>
				<link>https://devonpeel.me/2019/07/icinga2-ssl-check</link>
				<guid isPermaLink="true">https://devonpeel.me/2019/07/icinga2-ssl-check</guid>
			</item>
		
			<item>
				<title>Flash Cisco AP from a Mac</title>
				<description>&lt;p&gt;This is for a Cisco AIR 3502.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start off by installing the Tftp Server(http://ww2.unime.it/flr/tftpserver/oon your mac&lt;/li&gt;
  &lt;li&gt;Acquire the Cisco Firmware that will be flashed on the access point.&lt;/li&gt;
  &lt;li&gt;Place the firmware in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/private/tftpboot/&lt;/code&gt; and start the tftp service&lt;/li&gt;
  &lt;li&gt;Change the permission &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod 744 /private/tftpboot/&lt;/code&gt;and owner &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chown root:wheel /private/tftpboot&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Connect a usb serial adapter to the mac and test the device with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls /dev/cu.usbserial&lt;/code&gt;or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls /dev/ttyUSB0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;On the mac open terminal and open a console to the access points with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screen /dev/cu.usbserial 9600 cs8 -ixof&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Enter the username and password (hint: defaults are Cisco Cisco)&lt;/li&gt;
  &lt;li&gt;If you need to reset the device password press and hold the the mode button while the power is connected to the access point wait until the ap: prompt is displayed&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following commands will be run in the access point console&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Set IP of the access point &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set IP_ADDR 10.0.0.20&lt;/code&gt; and netmask &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set NETMASK 255.255.255.0
&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Tell the AP the router’s ip &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set DEFAULT_ROUTER 10.0.0.1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Configure the AP to accept new firmware over tftp &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tftp_init&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Start an ethernet connection to accept fireware&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ether_init&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Allow for flash memory to be accessed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flash_init&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Flash the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar -xtract tftp://&amp;lt;TFTP SERVER IP&amp;gt;/&amp;lt;FIRMWARE&amp;gt;.tar flash:&lt;/code&gt; an example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar -xtract tftp://&amp;lt;TFTP SERVER IP&amp;gt;/ap3g1-k9w7-tar.153-3.JF4.tar flash:&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Wait about 20 minutes, grab a coffee&lt;/li&gt;
  &lt;li&gt;Set the newly added firmware to boot&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set BOOT flash:/ap3g1-k9w7-mx.153-3.JF4/ap3g1-k9w7-mx.153-3.JF4&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set MANUAL_BOOT no&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set boot&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Reboot the access point and see if the newly added firmware boots&lt;/li&gt;
  &lt;li&gt;Log back into the access point and delete the old firmware to free up space &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete /force /recursive flash:&amp;lt;FIRMWARE&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Sun, 06 Jan 2019 17:25:06 -0600</pubDate>
				<link>https://devonpeel.me/2019/01/flash-cisco-ap-from-mac</link>
				<guid isPermaLink="true">https://devonpeel.me/2019/01/flash-cisco-ap-from-mac</guid>
			</item>
		
			<item>
				<title>Using Additional Ansible Facts</title>
				<description>&lt;p&gt;This article is an addition to Additional Ansible Windows Facts.&lt;/p&gt;

&lt;p&gt;To view the facts after running the role enter in the following in a terminal.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible &amp;lt;HOST or GROUP&amp;gt;  -m debug -a &quot;var=ansible_getFacts&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To search for host for a signal program:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible &amp;lt;HOST or GROUP&amp;gt; -m debug -a &quot;var=hostvars[inventory_hostname][&apos;ansible_getFacts&apos;][&apos;&amp;lt;PROGRAM NAME&amp;gt;&apos;]&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To check if a program is installed&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Set the register variable
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- name: get variables
  debug: var=hostvars[inventory_hostname][&apos;ansible_getFacts&apos;][&apos;&amp;lt;PROGRAM NAME&amp;gt;&apos;]
 register: &amp;lt;PROGRAM NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Next use the register with the ansible ‘when’ command. Below is an exaple that will run in cases of the program missing.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  when: hostvars[inventory_hostname][&apos;ansible_getFacts&apos;][&apos;&amp;lt;PROGRAM NAME&amp;gt;&apos;] is undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Complete Example&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- name: get variables
  debug: var=hostvars[inventory_hostname][&apos;ansible_getFacts&apos;][&apos;Microsoft Office Professional Plus 2016&apos;]
  register: msoffice_check

- name: create  ms office dir 
  win_file:
    path: C:\msoffice
    state: directory 
  when: hostvars[inventory_hostname][&apos;ansible_getFacts&apos;][&apos;Microsoft Office Professional Plus 2016&apos;] is undefined
 
- name: copy ms office dir to c drive
  win_copy:
    src:  /misc/software/msoffice2016/
    dest: C:\msoffice
  ignore_errors: yes
  when: hostvars[inventory_hostname][&apos;ansible_getFacts&apos;][&apos;Microsoft Office Professional Plus 2016&apos;] is undefined

- name:  Install msoffice
  win_command: choco install msoffice.20.16.1.nupkg -y
  args: 
    chdir: C:\msoffice
  ignore_errors: yes
  when: hostvars[inventory_hostname][&apos;ansible_getFacts&apos;][&apos;Microsoft Office Professional Plus 2016&apos;] is undefined

- name: remove MS office dir
  win_file:
    path: C:\msoffice
    state: absent
  when: hostvars[inventory_hostname][&apos;ansible_getFacts&apos;][&apos;Microsoft Office Professional Plus 2016&apos;] is defined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Thu, 21 Dec 2017 18:09:06 -0600</pubDate>
				<link>https://devonpeel.me/2017/12/using-additional-ansible-facts</link>
				<guid isPermaLink="true">https://devonpeel.me/2017/12/using-additional-ansible-facts</guid>
			</item>
		
			<item>
				<title>Additional Ansible Windows Facts</title>
				<description>&lt;p&gt;Ansible is a great tool to manage any Linux or Windows host. However it is missing some key tools and features. Here is a playbook and instructions to gather all installed programs on a Windows host.&lt;/p&gt;

&lt;p&gt;Start with creating a new role, I named mine facts.&lt;/p&gt;

&lt;p&gt;Create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;facts\tasks\main.yml&lt;/code&gt; file and add the following&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
- name: create Scripts dir
  win_file:
    path: C:\Scripts
    state: directory 

- name: create Scripts facts dir
  win_file:
    path: C:\Scripts\facts
    state: absent        

- name: copy custom facts file
  win_copy:
    src: getFacts.ps1
    dest: C:\Scripts\

- name: gather extra facts
  setup:
    fact_path: C:\Scripts

- name: Set intermediate fact
  set_fact:
    vars_hack: &quot;&quot;

- name: set program facts
  set_fact:
    one_fact: ansible_getFacts
    var_hack:  &quot;&quot; 
            
- name: delete json file 
  file:
    path: &quot;/.json&quot;
    state: absent
  failed_when: false
  delegate_to: localhost

- name: Dump all vars
  action: template src=templates/dumpall.j2 dest=&quot;/.json&quot;
  delegate_to: localhost

- name: add to db
  script: app.py
  delegate_to: localhost
  ignore_errors: true



&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;facts/files/getFacts.ps1&lt;/code&gt; file and add the follwoing below. This file will be copied to each Windows host and run return a dictionary of all installed programs.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#sourced from https://hindenes.com/trondsworking/2016/11/05/using-ansible-as-a-software-inventory-db-for-your-windows-nodes/
$packages = Get-WmiObject -Class Win32_Product
$returnpackages = @{}
foreach ($package in $packages)
{
   $subpackagedictionary = @{&quot;Name&quot; = $Package.Name; &quot;Version&quot; = $Package.Version; &quot;Caption&quot; = $Package.Caption;}
   $returnpackages.Add($Package.Name, $subpackagedictionary)
}
#Write-Host $returnpackages.&quot;Google Chrome&quot;.Name
#Write-Host $returnpackages.&quot;Google Chrome&quot;.Version
$returnpackages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For debugging purposes you may want to create JSON files from the returned dictionary. To do so create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;facts/templates/dumpall.j2&lt;/code&gt; and add the following.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
  {{ vars_hack | to_json }}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;facts\files\app.py&lt;/code&gt; and add the following below. This files erases passwords dumped in the the json files.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/env python
# orginal found at https://hindenes.com/trondsworking/2016/11/05/using-ansible-as-a-software-inventory-db-for-your-windows-nodes/

import os
import json

from os import listdir
from os.path import isfile, join

tempfolder = &apos;../roles/facts/files/data/json/&apos;

if not os.path.isdir(tempfolder):
  os.makedirs(tempfolder)

onlyfiles = [f for f in listdir(tempfolder) if isfile(join(tempfolder, f))]

for file in onlyfiles:
  host_name = str(file).replace(&apos;.json&apos;,&apos;&apos;)  ##I am using host ips, to use hostnames use str(file).split(&quot;.&quot;)[3]
  with open(os.path.join(tempfolder, file),&apos;r+&apos;) as data_file:
      data = json.load(data_file)
      data[&apos;ansible_password&apos;] = &apos;&apos;
      data[&apos;ansible_password_ad&apos;] = &apos;&apos;
      data_file.close()
  with open(tempfolder+&apos;/&apos;+file, &apos;w+&apos;) as outfile:
    json.dump(data, outfile, sort_keys=True, indent=2, separators=(&apos;,&apos;, &apos;: &apos;))
  outfile.close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create one last file the vars file for the role. Create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vars/main.yml&lt;/code&gt; and add the following.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;json_files: &apos;../roles/facts/files/data/json/&apos;
host_program_csv: &apos;../roles/facts/files/data/programs&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now install the redis service.
For Centos 7&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install redis
systemctl enable redis
systemctl start redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Generate a hash for redis&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;redis-password-string&quot; | sha256sum 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Edit the redis config file in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/redis.conf&lt;/code&gt;and find the line &lt;em&gt;requirepass&lt;/em&gt; and insert the generated hash&lt;/p&gt;

&lt;p&gt;Edit your base ansible.cfg usualy in the first directory of your ansible setup and add the line&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fact_caching_connection = &amp;lt;redis-ip&amp;gt;:6379:0:&amp;lt;redis-hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Updated: 2/7/2019&lt;/p&gt;
</description>
				<pubDate>Tue, 14 Nov 2017 12:37:06 -0600</pubDate>
				<link>https://devonpeel.me/2017/11/addition-ansible-windows-facts</link>
				<guid isPermaLink="true">https://devonpeel.me/2017/11/addition-ansible-windows-facts</guid>
			</item>
		
	</channel>
</rss>
